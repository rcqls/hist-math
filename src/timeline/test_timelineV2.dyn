---
model: jquery3
title: timeline
semantic-ui: css,js
---
[#<]{#LayoutCSSHeader]<script src="https://code.createjs.com/1.0.0/createjs.min.js"></script>[#}
[#rb<]
require 'yaml'
people=YAML::load_file(File.expand_path("~/RodaSrv/public/users/Histoires/people_priorite.yml"))
events=YAML::load_file(File.expand_path("~/RodaSrv/public/users/Histoires/events.yml"))
dates_people={}
people.keys.each do |e| #
	tmp=people[e]["dates"].gsub("?","").split(";")
	dates_people[e]={:birth=>tmp[0].to_i,:death => (tmp[1].nil? ?  2020 : tmp[1].to_i)}
end

dates_keys=[]
people_max={math: [1], others: [1]}
(1..4).each do |prio| #
	cur_high=[""]*(people.length+1)
	dates_keys_math=dates_people.keys.select{|e| people[e]["math"] and people[e]["priorite"]== prio}.sort_by {|e| dates_people[e][:birth]}
	dates_keys += dates_keys_math
	dates_keys_math.each do |e| #
		birth,death=dates_people[e][:birth],dates_people[e][:death]
		cur_high.each_index do |i| #
			if cur_high[i].empty? or dates_people[cur_high[i]][:death] < birth
				cur_high[i]=e
				dates_people[e][:high]= i + people_max[:math][prio-1]
				dates_people[e][:priority]=prio
				dates_people[e][:math]=true
				break
			end
		end
	end
	people_max[:math][prio] = cur_high.select{|e| !e.empty?}.length + people_max[:math][prio-1]

end

(1..4).each do |prio| #
	cur_high=[""]*(people.length+1)
	dates_keys_others=dates_people.keys.select{|e| (!people[e]["math"]) and people[e]["priorite"]== prio }.sort_by {|e| dates_people[e][:birth]}
	dates_keys += dates_keys_others
	dates_keys_others.each do |e| #
		birth,death=dates_people[e][:birth],dates_people[e][:death]
		cur_high.each_index do |i| #
			if cur_high[i].empty? or dates_people[cur_high[i]][:death] < birth
				cur_high[i]=e
				dates_people[e][:high]= i+people_max[:others][prio-1]
				dates_people[e][:priority]=prio
				dates_people[e][:math]=false
				break
			end
		end
	end
	people_max[:others][prio]= cur_high.select{|e| !e.empty?}.length + people_max[:others][prio-1]
end

#time_lims=[]
#(1..4).each do |prio| #
time_lim={
	min: dates_people.keys.map{|e| dates_people[e][:birth]}.min,
	max: dates_people.keys.map{|e| dates_people[e][:death]}.max
}
#end

timelimJS="["
(1..4).each do |prio| #
	timelimJS << "{min: " << dates_people.keys.select{|e| dates_people[e][:priority] <= prio}.map{|e| dates_people[e][:birth]}.min.to_s << ", max: " << dates_people.keys.select{|e| dates_people[e][:priority] <= prio}.map{|e| dates_people[e][:death]}.max.to_s << "}"
	timelimJS << "," if prio != 4
end
timelimJS << "]"

{#hide][#hide}

datesJS = "{" + dates_keys.map{|e| #
	dates=people[e]["dates"].split(";").map{|e| (e2=e.strip) =~ /^\?.*/ ? "c. "+e2[1..-1] : e2}.join(", ")
	e+": {birth: " + dates_people[e][:birth].to_s + ", death: " + dates_people[e][:death].to_s + ", high: " + dates_people[e][:high].to_s + ", priority: " + dates_people[e][:priority].to_s + ", math: " + dates_people[e][:math].to_s + ", name: \"" + people[e]["complete"].to_s + "\", dates: \"" + dates+ "\", abstract: \"" + people[e]["abstract"].strip.gsub("\n",' ').gsub(":","&#58;").to_s + "\", portrait: " + people[e]["portrait"].to_s + "}"
}.join(", ") + "}"

eventsJS="{" + events.keys.map{|e| #
	e+": {title: \"" + events[e]["titre"].to_s + "\", date: " + events[e]["date"].to_s + ", nature: \"" + events[e]["nature"].to_s + "\", wiki: \"" + events[e]["wikipedia"].to_s + "\", priority: " + events[e]["priorite"].to_s + "}"
}.join(", ") + "}"
{#hide]

[#hide}
[#html>]

<!--  :{timelimJS.inspect} -->

<canvas id="canvasTL"></canvas>
<!-- div id "toto" class="ui container" width=100 height=100>
<div id="pp_Hammurabi"  class="ui popup" style="min-width:500px;background-color: linen;opacity: 0.95;">
      <div class="card">
        <div class="content">
          <div> <-- div class="Hammurabi people"->
            <div class="eight wide column" align="justify">
              <img class="ui small image floated right" src="/users/Histoires/people/Hammurabi.png"></img>
              <h3 class="ui header">
                Hammurabi (c. -1800, c. -1750)
                <div class="sub header">Le premier code civil.
</div>
              </h3>
              <strong><a href="https://fr.wikipedia.org/wiki/Hammurabi" target="_blank">wikipedia</a> </strong><br/>
              <br/><strong>histoires</strong>&thinsp;&thinsp;&thinsp;:&thinsp;&thinsp;&thinsp;[<a class="go_tab" tab="histoires" to="gilgamesh"  style="color:teal">Où tout a commencé</a>]  [<a class="go_tab" tab="histoires" to="nippur"  style="color:teal">La maison des tablettes</a>]  [<a class="go_tab" tab="histoires" to="babylone"  style="color:teal">Les pères de l'algèbre</a>] <br/> 
            </div>
          </div>
        </div>
      </div>
    </div>
</div -->
<script>
var tL={
	s: new createjs.Stage("canvasTL"),
	i: {
		dim: {tig: :{time_lim[:min]},tsg: :{time_lim[:max]}, ti: :{time_lim[:min]},ts: :{time_lim[:max]}, tz: true, tzi: -1900, tzs: 2020, ii:  -1,is: 1},
		timelim: :{timelimJS},
		zoom: {ta: 1.0, tb: 0.0, ia: 1.0, ib: 0.0,tag: 1.0, tbg: 0.0},
		style: {border: 3, alpha: [1.0,0.6,0.4,0.2,0.1], alphaPrev: 1.0} //border= integer to add space at top and bottom
	},
	f: {},
	menu: {
		math: {},
		others: {},
		events: {}
	},
	zoom: {},
	events: :{eventsJS},
	people: {
		dates: :{datesJS}, 
		max_math: :{people_max[:math].inspect},
		max_others: :{people_max[:others].inspect}
	},
	priority: {math: 2, others: 2, events: 1},
	rect: {people: 8, events: 3, axis: 8, zoom: 4},
	popup: {
		people: {
			div: document.createElement('div'),
			img: document.createElement('img'),
			header: document.createElement('h3'),
			abstract: document.createElement('p')
		},
		people2: {
			prev: "",
			div: document.createElement('div'),
			img: document.createElement('img'),
			header: document.createElement('h3'),
			abstract: document.createElement('p')
		},
		events: {
			div: document.createElement('div'),
			header: document.createElement('strong'),
			abstract: document.createElement('span')
		}
	}
};
//correct initialization of tzi and tzs (useful when tzs first changed!)
tL.i.dim.tzi=tL.i.timelim[tL.priority.others - 1].min;
tL.i.dim.tzs=tL.i.timelim[tL.priority.others - 1].max;


tL.f.ttg=function(t) {
	return tL.i.zoom.tag * t + tL.i.zoom.tbg;
}

tL.f.ttgi=function(t) {
	return 1/tL.i.zoom.tag * t - tL.i.zoom.tbg/tL.i.zoom.tag;
}

tL.f.init=function() {
	tL.s.enableMouseOver(10);
	tL.s.canvas.width = window.innerWidth;
	tL.s.canvas.height = window.innerHeight;
	tL.i.dim.ti = tL.i.dim.tz ? tL.i.dim.tzi : tL.i.dim.tig ;
	tL.i.dim.ts = tL.i.dim.tz ? tL.i.dim.tzs : tL.i.dim.tsg ;
	tL.i.dim.ii = -tL.people.max_others[tL.priority.others] - tL.i.style.border;
	tL.i.dim.is = tL.people.max_math[tL.priority.math] + tL.i.style.border;

	tL.i.zoom.ta=tL.s.canvas.width/(tL.i.dim.ts - tL.i.dim.ti);
	tL.i.zoom.tb=-tL.i.zoom.ta * tL.i.dim.ti;

	tL.i.zoom.ia=tL.s.canvas.height/(tL.i.dim.ii - tL.i.dim.is);
	tL.i.zoom.ib=-tL.i.zoom.ia * tL.i.dim.is;

	//g est pour global et sert pour le réglage du zoom
	tL.i.zoom.tag=tL.s.canvas.width/(tL.i.dim.tsg - tL.i.dim.tig);
	tL.i.zoom.tbg=-tL.i.zoom.tag * tL.i.dim.tig;

	tL.rect.people= -tL.i.zoom.ia - 1;
	tL.rect.axis= -(tL.i.zoom.ia * 2);
	tL.rect.zoom=-tL.i.zoom.ia * 0.75;

}

tL.f.tt=function(t) {
	return tL.i.zoom.ta * t + tL.i.zoom.tb;
}

tL.f.it=function(i) {
	return tL.i.zoom.ia * i + tL.i.zoom.ib;
}

tL.f.update=function(timezoom) {
	tL.s.removeAllChildren();
	tL.i.dim.tz=timezoom;
	tL.f.init();
	tL.f.show();
}

tL.f.init();

tL.f.drawPopupPeople=function() {

	var html = tL.popup.people.div;
	html.id = 'mathpopup';
	html.style.width = "35%";
	html.style.minHeight = "100px";
	html.style.opacity= 0.75;
	html.style.backgroundColor = 'linen';

	var htmlContent = document.createElement('p');
	htmlContent.style.margin = "25px";

	var htmlImg = tL.popup.people.img;
	htmlImg.src = "/users/Histoires/people/Thales.png";
	htmlImg.style.width = "100px";
	htmlImg.style.height = "100px";
	htmlImg.style.float = "right";

	htmlContent.appendChild(htmlImg);

	var htmlH3 = tL.popup.people.header;
	htmlH3.innerHTML = "Hammurabi (c. -1800, c. -1750)";
    
	htmlContent.appendChild(htmlH3);

	var htmlAbstract = tL.popup.people.abstract;
	htmlAbstract.innerHTML="abstract";
	htmlContent.appendChild(htmlAbstract);

	html.appendChild(htmlContent);
	
	html.style.position = "absolute";
	html.style.top = 0;
	html.style.left = 0;
	document.body.appendChild(html);

	tL.popup.people.gg = new createjs.DOMElement(html);
	tL.popup.people.gg.visible = false;
	tL.popup.people.gg.x = tL.popup.people2.gg.htmlElement.offsetWidth+50;
	tL.popup.people.gg.y = 20;
	//gg.alpha = 0.5;
	tL.s.addChild(tL.popup.people.gg);

	//createjs.Tween.get(gg).to({x:400}, 1000);
}


tL.f.drawPopupPeople2=function() {

	var html = tL.popup.people2.div;
	html.id = 'mathpopup';
	html.style.width = "35%";
	html.style.minHeight = "100px";
	html.style.opacity= 0.75;
	html.style.backgroundColor = 'linen';

	var htmlContent = document.createElement('p');
	htmlContent.style.margin = "25px";

	var htmlImg = tL.popup.people2.img;
	htmlImg.src = "/users/Histoires/people/Thales.png";
	htmlImg.style.width = "100px";
	htmlImg.style.height = "100px";
	htmlImg.style.float = "right";

	htmlContent.appendChild(htmlImg);

	var htmlH3 = tL.popup.people2.header;
	htmlH3.innerHTML = "Hammurabi (c. -1800, c. -1750)";
    
	htmlContent.appendChild(htmlH3);

	var htmlAbstract = tL.popup.people2.abstract;
	htmlAbstract.innerHTML="abstract";
	htmlContent.appendChild(htmlAbstract);

	html.appendChild(htmlContent);
	
	html.style.position = "absolute";
	html.style.top = 0;
	html.style.left = 0;
	document.body.appendChild(html);

	tL.popup.people2.gg = new createjs.DOMElement(html);
	tL.popup.people2.gg.visible = false;
	tL.popup.people2.gg.x = 20;
	tL.popup.people2.gg.y = 20;
	//gg.alpha = 0.5;
	tL.s.addChild(tL.popup.people2.gg);

	//createjs.Tween.get(gg).to({x:400}, 1000);
}

tL.f.drawPopupEvents=function() {

	var html = tL.popup.events.div;
	html.id = 'eventpopup';
	html.style.minWidth = "100px";
	html.style.minHeight = "50px";
	html.style.opacity= 0.75;
	//html.style.margin="5px";
	html.style.paddingRight=html.style.paddingLeft= "10px";
	html.style.borderColor="black";
	html.style.fontSize="14";

	html.style.backgroundColor = 'red';

	var htmlContent = document.createElement('p');
	//htmlContent.style.margin = "25px";

	var htmlH3 = tL.popup.events.header;
	htmlH3.innerHTML = "date";
    
	htmlContent.appendChild(htmlH3);

	var htmlAbstract = tL.popup.events.abstract;
	htmlAbstract.innerHTML="titre";
	htmlContent.appendChild(htmlAbstract);

	html.appendChild(htmlContent);
	
	html.style.position = "absolute";
	html.style.top = 0;
	html.style.left = 0;
	document.body.appendChild(html);

	tL.popup.events.gg = new createjs.DOMElement(html);
	tL.popup.events.gg.visible = false;
	tL.popup.events.gg.x = 500;
	tL.popup.events.gg.y = 20;
	//gg.alpha = 0.5;
	tL.s.addChild(tL.popup.events.gg);

	//createjs.Tween.get(gg).to({x:400}, 1000);
}

tL.f.drawPeople=function() {
	var keys=Object.keys(tL.people.dates);
	keys.forEach((key) => {
		var person=tL.people.dates[key];
		if((person.math && person.priority <= tL.priority.math) || (!person.math && person.priority<= tL.priority.others)) {
			var rect = new createjs.Shape();
			rect.alpha = tL.i.style.alpha[person.priority];
			rect.person = key;
			rect.graphics.beginFill(person.math ? 'blue' : "red");
			rect.graphics.drawRect(0,-tL.rect.people/2, tL.i.zoom.ta*(person.death - person.birth), tL.rect.people);
			rect.graphics.endFill();
			rect.x=tL.f.tt(person.birth);
			rect.y=tL.f.it((person.math ? 1.0 : -1.0) * (person.high + 3));
			rect.on("mouseover", handleOver);
			rect.on("mouseout", handleOver);
			rect.on("click", handleClick);
			tL.s.addChild(rect);
		}
	});
}

tL.f.drawEvents=function() {
	var keys=Object.keys(tL.events);
	keys.forEach((key) => {
		var event=tL.events[key];
		if(event.priority <= tL.priority.events) {
			var rect = new createjs.Shape();
			rect.alpha = tL.i.style.alpha[event.priority];
			rect.event = key;
			rect.graphics.beginFill("black");
			if(tL.priority.events == 1) { 
				rect.graphics.drawRect(-tL.rect.events/2,0, tL.rect.events,-tL.i.zoom.ia*2);
				rect.graphics.endFill();
				rect.x=tL.f.tt(event.date);
				rect.y=tL.f.it(event.nature == "art" ? 3 : -1);
			} else {
				rect.graphics.drawRect(-tL.rect.events/2,0, tL.rect.events,-tL.i.zoom.ia);
				rect.graphics.endFill();
				rect.x=tL.f.tt(event.date);
				rect.y=tL.f.it(event.nature == "art" ? (event.priority == 1 ? 2 : 3) : (event.priority == 1 ? -1 : -2));
			}
			rect.on("mouseover", handleOver);
			rect.on("mouseout", handleOver);
			tL.s.addChild(rect);
		}
	});
}

tL.f.drawTime=function() {
	var rect = new createjs.Shape();
	rect.graphics.beginFill('grey');
	rect.graphics.drawRect(0,-tL.rect.axis/2, tL.i.zoom.tag*(tL.i.dim.tsg - tL.i.dim.tig) , tL.rect.axis);
	rect.graphics.endFill();
	rect.x=tL.f.ttg(tL.i.dim.tig);rect.y=tL.f.it(0);
	rect.on("click",function(evt) {
		tL.f.update(true);
	});
	tL.s.addChild(rect);

	var rect = new createjs.Shape();
	rect.graphics.beginFill('black');
	//rect.alpha=0.6;
	rect.graphics.drawRect(0,-tL.rect.zoom/4, tL.i.zoom.tag*(tL.i.dim.tsg - tL.i.dim.tig) , tL.rect.zoom/2);
	rect.graphics.endFill();
	rect.x=tL.f.ttg(tL.i.dim.tig);rect.y=tL.f.it(0);
	rect.on("click",function(evt) {
		tL.f.update(false);
	});
	tL.s.addChild(rect);

	tL.zoom.time= new createjs.Shape();
	var rect = tL.zoom.time;
	rect.graphics.beginFill('black');
	rect.graphics.drawRect(0,-tL.rect.zoom/2, tL.i.zoom.tag*(tL.i.dim.tzs - tL.i.dim.tzi) , tL.rect.zoom);
	rect.graphics.endFill();
	rect.x=tL.f.ttg(tL.i.dim.tzi);rect.y=tL.f.it(0);
	rect.on("click",function(evt) {
		tL.f.update(false);
	});
	tL.s.addChild(rect);
	tL.zoom.left = new createjs.Shape();
	var circle = tL.zoom.left;
	circle.graphics.beginFill('white');
	circle.graphics.drawCircle(0,0,tL.rect.zoom/2);
	circle.x=tL.f.ttg(tL.i.dim.tzi);circle.y=tL.f.it(0);
	circle.on("mousedown", function(evt) {
		evt.target.xOLD=evt.target.x;
		tL.f.update(false);
	});
	circle.on("pressmove",function(evt) {
		tL.zoom.left.x = evt.stageX;
	});
	circle.on("pressup", function(evt) {
		evt.target.x = evt.stageX;
		tL.zoom.time.x = evt.stageX;
		tL.s.removeAllChildren();
		tL.i.dim.tz=true;
		tL.i.dim.tzi=tL.f.ttgi(tL.zoom.time.x);
		tL.f.init();
		tL.f.show();
	});
	tL.s.addChild(circle);

	tL.zoom.right = new createjs.Shape();
	var circle = tL.zoom.right;
	circle.graphics.beginFill('white');
	circle.graphics.drawCircle(0,0,tL.rect.zoom/2);
	circle.x=tL.f.ttg(tL.i.dim.tzs)-tL.rect.zoom/2;circle.y=tL.f.it(0);
	circle.on("mousedown", function(evt) {
		evt.target.xOLD=evt.target.x;
		tL.f.update(false);
	});
	circle.on("pressmove",function(evt) {
		tL.zoom.right.x = evt.stageX;
	});
	circle.on("pressup", function(evt) {
		evt.target.x = evt.stageX;
		tL.zoom.time.x = evt.stageX;
		tL.s.removeAllChildren();
		tL.i.dim.tz=true;
		tL.i.dim.tzs=tL.f.ttgi(tL.zoom.time.x);
		tL.f.init();
		tL.f.show();
	});
	tL.s.addChild(circle);

}

tL.f.drawMenu=function() {
	tL.menu.math.circle = new createjs.Shape();
	var circle = tL.menu.math.circle;
	circle.graphics.beginFill("blue").drawCircle(20, tL.s.canvas.height - 30 , 20);
	circle.alpha=0.5;
	circle.on("click",function(event) {
		tL.priority.math += 1;
		if(tL.priority.math > 4) {tL.priority.math=1;}
		tL.s.removeAllChildren();
		tL.f.init();
		tL.f.show();
	});
	
	tL.menu.math.label = new createjs.Text("", "bold 14px Arial", "#FFFFFF");
	var label = tL.menu.math.label;
	label.text = tL.priority.math;
	label.textAlign = "center";
	label.x=20;label.y=tL.s.canvas.height - 40;
	tL.s.addChild(circle,label);

	tL.menu.others.circle = new createjs.Shape();
	var circle = tL.menu.others.circle;
	circle.graphics.beginFill("red").drawCircle(70, tL.s.canvas.height - 30 , 20);
	circle.alpha=0.5;
	circle.on("click",function(event) {
		tL.priority.others += 1;
		if(tL.priority.others > 4) {tL.priority.others=1;}
		tL.s.removeAllChildren();
		tL.f.init();
		tL.f.show();
	});
	
	tL.menu.others.label = new createjs.Text("", "bold 14px Arial", "#FFFFFF");
	var label = tL.menu.others.label;
	label.text = tL.priority.others;
	label.textAlign = "center";
	label.x=70;label.y=tL.s.canvas.height - 40;
	tL.s.addChild(circle,label);

	tL.menu.events.circle = new createjs.Shape();
	var circle = tL.menu.events.circle;
	circle.graphics.beginFill("black").drawCircle(120, tL.s.canvas.height - 30 , 20);
	circle.alpha=0.5;
	circle.on("click",function(event) {
		tL.priority.events += 1;
		if(tL.priority.events > 2) {tL.priority.events=1;}
		tL.s.removeAllChildren();
		tL.f.init();
		tL.f.show();
	});
	
	tL.menu.events.label = new createjs.Text("", "bold 14px Arial", "#FFFFFF");
	var label = tL.menu.events.label;
	label.text = tL.priority.events;
	label.textAlign = "center";
	label.x=120;label.y=tL.s.canvas.height - 40;
	tL.s.addChild(circle,label);
}

tL.f.show=function() {

	tL.f.drawEvents();
	tL.f.drawPeople();
	tL.f.drawPopupPeople2();
	tL.f.drawPopupPeople();
	tL.f.drawPopupEvents();
	tL.f.drawTime();
	tL.f.drawMenu();
	//tL.s.setTransform(0,500,1.0,-1.0);
	//tL.s.setTransform(tL.i.zoom.tb ,tL.i.zoom.ib,1.0,1.0);
	tL.s.update();
}

tL.f.show();

createjs.Ticker.addEventListener("tick", tL.s);
createjs.Touch.enable(tL.s);

function handleOver(event) {
	if(event.type == "mouseover") {
		event.target.alpha = 1; 
		if( event.target.person !== undefined) {
			tL.popup.people.gg.visible = true;
			var person = tL.people.dates[event.target.person];
			tL.i.style.alphaPrev = tL.i.style.alpha[person.priority];
			tL.popup.people.img.src = "/users/Histoires/people/"+(person.portrait ? event.target.person : "interrogation") +".png";
			tL.popup.people.header.innerHTML= person.name + " ("+ person.dates +")";
			tL.popup.people.abstract.innerHTML=person.abstract;
		}
		if( event.target.event !== undefined) {
			tL.popup.events.gg.visible = true;
			var eventHist = tL.events[event.target.event];
			tL.i.style.alphaPrev = tL.i.style.alpha[eventHist.priority];
			tL.popup.events.header.innerHTML = eventHist.date+": ";
			tL.popup.events.abstract.innerHTML = eventHist.title;
			tL.popup.events.gg.x=(event.rawX + tL.popup.events.div.offsetWidth > tL.s.canvas.width) ? event.rawX - tL.popup.events.div.offsetWidth : event.rawX;
			tL.popup.events.gg.y=(eventHist.nature == "art" ? tL.f.it(2) - tL.popup.events.div.offsetHeight : tL.f.it(-3));
			var col;
			switch (eventHist.nature) {
				case 'politique':
					col="orange";
					break;
				case 'art':
					col="cyan";
					break;
			}
			tL.popup.events.div.style.backgroundColor= col;
		}
	} else {
		event.target.alpha = tL.i.style.alphaPrev;
		tL.popup.people.gg.visible = false;
		tL.popup.events.gg.visible = false;
	}
}

function handleClick(event) { 
	if(tL.popup.people2.prev != event.target.person) {
		tL.popup.people2.gg.visible = true;
		var person = tL.people.dates[event.target.person];
		tL.popup.people2.img.src = "/users/Histoires/people/"+(person.portrait ? event.target.person : "interrogation") +".png";
		tL.popup.people2.header.innerHTML= person.name + " ("+ person.dates +")";
		tL.popup.people2.abstract.innerHTML=person.abstract;
		tL.popup.people2.prev = event.target.person;
	} else {
		tL.popup.people2.gg.visible = false;
		tL.popup.people2.prev = "";
	}
}

window.onresize=function() {
	tL.s.removeAllChildren();
	tL.f.init();
	tL.f.show();
}
</script>