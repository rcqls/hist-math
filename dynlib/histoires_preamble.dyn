{#def]initAll[#<]
{#initRuby#}
{#initHistoires#}
{#initPeople#}
{#initTextes#}
[#def}

{#def]initRuby[#rb<]
require 'yaml'
domaines=["Analyse","Astronomie","Geometrie","Algebre","Arithmetique","Savants","Statistique","Informatique"]
domaines_titres={"Algebre" => "Algèbre","Arithmetique" => "Arithmétique", "Geometrie" => "Géométrie"}
domaines.each {|dom| domaines_titres[dom]=dom unless domaines_titres[dom]}

########## Début histoires
##### Ruby
motsclesHistoires=[]
histoires_motscles={}
periodesHistoires={}
histoires=YAML::load_file(File.expand_path("~/RodaSrv/public/users/Histoires/histoires.yml"))
people=YAML::load_file(File.expand_path("~/RodaSrv/public/users/Histoires/people.yml"))
textes=YAML::load_file(File.expand_path("~/RodaSrv/public/users/Histoires/textes.yml"))
domaines.each do |domaine| #
  domaine_titre=domaines_titres[domaine]
  vitrine=histoires.select {|k,e| e["domain"]==domaine_titre}.sort_by{|k,e| e["location"].to_i}
  vitrine.each do |hist,info| #
    if info["keywords"] or info["motscles"]
      motsclesHistoires << (info["keywords"] || info["motscles"]).split(";").map{|e| #
        motcle=e.strip  #.downcase
        histoires_motscles[motcle] ||= []
        histoires_motscles[motcle] << hist
        motcle
      }
    end
    if info["people"]
      info["people"].split(";").each{|e| #
        if people[(e.strip)[0...(-3)]] and people[(e.strip)[0...(-3)]]["keywords"]
          people[(e.strip)[0...(-3)]]["keywords"].split(";").each {|k| #
            motcle=k.strip
            histoires_motscles[motcle] ||= []
            histoires_motscles[motcle] << hist
            motsclesHistoires << motcle
          }
        #else
        #  puts (e.strip)[0...(-3)]
        end
      }
    end
    if info["period"] or info["periode"]
      from,to=(info["period"] || info["periode"]).split(";").map{|e| e.strip}
      periodesHistoires[hist]=[from,to]
    end
  end
end
motsclesHistoires=motsclesHistoires.flatten.uniq.sort #sort_by{|e| e.upcase}
##### Javascript
motsclesHistoires_js="["+motsclesHistoires.map{|e| '"'+e+'"'}.join(",")+"]"
motscles2histoires_js='{'+motsclesHistoires.map{|e| '"'+e+'": "'+histoires_motscles[e].join(",")+'"'}.join(", ")+'}'
periodesHistoires_js='{'+periodesHistoires.keys.map{|hist| '"'+hist+'": ['+periodesHistoires[hist][0].to_s+','+periodesHistoires[hist][1].to_s+']' }.join(", ")+'}'
motsclesHistoires_dropdown=motsclesHistoires.map{|e| e}.select{|e| !e.empty?}.join("|")
########## Fin histoires

########## Début people
###### Ruby
motsclesPeople=[]
people_motscles={}
periodesPeople={}
people.each do |person,info| #
  if info["keywords"] or info["motscles"]
    motsclesPeople << (info["keywords"] || info["motscles"]).split(";").map{|e| #
      motcle=e.strip  #.downcase
      people_motscles[motcle] ||= []
      people_motscles[motcle] << person
      motcle
    }
  end
  if info["dates"] or info["periode"]
    from,to=(info["dates"] || info["periode"]).split(";").map{|e| (e2=e.strip) =~ /\?.*/ ? e2[1..-1] : e2 }
    periodesPeople[person]=[from,to]
  end
end
motsclesPeople=motsclesPeople.flatten.uniq.sort #sort_by{|e| e.upcase}
##### Javascript
motsclesPeople_js="["+motsclesPeople.map{|e| '"'+e+'"'}.join(",")+"]"
motscles2people_js='{'+motsclesPeople.map{|e| '"'+e+'": "'+people_motscles[e].join(",")+'"'}.join(", ")+'}'
periodesPeople_js='{'+periodesPeople.keys.map{|person| '"'+person+'": ['+periodesPeople[person][0].to_s+','+periodesPeople[person][1].to_s+']' }.join(", ")+'}'
motsclesPeople_dropdown=motsclesPeople.map{|e| e}.join("|")
########## Fin people

########## Début textes
##### Ruby
motsclesTextes=[]
textes_motscles={}
periodesTextes={}
textes.each do |texte,info| #
  if info["auteur"]
	  info["auteur"].split(";").each{|e| #
      if people[e]
        motcle=people[e]["name"]
        textes_motscles[motcle] ||= []
        textes_motscles[motcle] << texte
        motsclesTextes << motcle
      end
    }
  end
  if info["date"] or info["periode"]
    date= info["date"].to_s
    tmp=date.split(";").map{|e| (e2=e.strip) =~ /\?.*/ ? e2[1..-1] : e2 }[0]
    #tmp=tmp*(3-tmp.length)
    from,to=tmp,tmp
	  periodesTextes[texte]=[from,to]
  end
end
motsclesTextes=motsclesTextes.flatten.uniq.sort #sort_by{|e| e.upcase}
##### Javascript
motsclesTextes_js="["+motsclesTextes.map{|e| '"'+e+'"'}.join(",")+"]"
motscles2textes_js='{'+motsclesTextes.map{|e| '"'+e+'": "'+textes_motscles[e].join(",")+'"'}.join(", ")+'}'
periodesTextes_js='{'+periodesTextes.keys.map{|texte| '"'+texte+'": ['+periodesTextes[texte][0].to_s+','+periodesTextes[texte][1].to_s+']' }.join(", ")+'}'
motsclesTextes_dropdown=motsclesTextes.map{|e| e}.join("|")
########## Fin textes

########## Dictionnaires (Ruby)
###### histoires pour people
people2histoires={}
histoires.each do |hist,info| #
  if info["people"]
    info["people"].split(";").each{|e| #
      person=(e.strip)[0...(-3)]
      people2histoires[person] ||= []
      people2histoires[person] << [hist,(e.strip)[-2].to_i]
    }
  end
end

###### textes pour histoires
textes2histoires={}
textes.each do |texte,info| #
  if info["histoires"]
    info["histoires"].split(";").each{|e| #
      hist=e.strip
      textes2histoires[hist] ||= []
      textes2histoires[hist] << texte
    }
  end
end

##### textes pour people
textes2people={}
textes.each do |texte,info| #
  if info["auteur"]
    info["auteur"].split(";").each{|e| #
      auteur=e.strip
      textes2people[auteur] ||= []
      textes2people[auteur] << texte
    }
  end
end
########## Fin Dictionnaires
[#def}


{#def]initHistoires[#<]
{#LayoutCSSCode]
.go_tab:hover {cursor: context-menu;}
.vue_texte:hover, .vue_person:hover, .vue_histoire:hover {cursor: pointer;}
[#}
{#LayoutJSCode]
Array.prototype.unique = function() {
    var o = {}, i, l = this.length, r = [];
    for(i=0; i<l;i+=1) o[this[i]] = this[i];
    for(i in o) r.push(o[i]);
    return r;
};

Histoires={}
Histoires.motscles=:{motsclesHistoires_js};
Histoires.motscles2histoires=:{motscles2histoires_js};
Histoires.periodes=:{periodesHistoires_js};
Histoires.et_ou="";
Histoires.motscles_selection="";

function intersectPeriodHistoires(from,to) {
  var histoires=[];
  Object.keys(Histoires.periodes).forEach(function(hist) {
    var periode=Histoires.periodes[hist];
    //alert("periode:"+JSON.stringify(periode)+","+JSON.stringify(from)+","+JSON.stringify(to));
    if(periode[1]>=from && periode[0]<=to) {
      histoires.push(hist);
    }
  });
  //alert("periodes="+JSON.stringify(histoires));
  return histoires;
};

function select_histoires(motscles_selection,et_ou) {
  var histoiresParMotscles=motscles_selection.split(",").unique();
  //fix weird behavior of split "".split(",") == [""]
  if(histoiresParMotscles.includes("") && histoiresParMotscles.length==1) histoiresParMotscles=[];
  Histoires.motscles_selection=histoiresParMotscles.join(",");
  motscles_selection=Histoires.motscles_selection;
  var periode=$("#periode_histoires").val(),inter=[];
  var histoiresParPeriodes=[];
  if(periode != "") {
    inter=periode.split(";");
    if(inter.length==1) inter.push(inter[0]);
    //alert("inter="+JSON.stringify(inter));
    histoiresParPeriodes=intersectPeriodHistoires(parseInt(inter[0]),parseInt(inter[1]));
  }
  //alert("periode=<"+periode+"> et/ou=<"+et_ou+"> motscles=<"+motscles+">");
  //alert("periodes="+JSON.stringify(histoiresParPeriodes)+"] et/ou=<"+JSON.stringify(et_ou)+"> motscles="+JSON.stringify(histoiresParMotscles));
  //hide and show
  $(".histoire").hide();
  if(histoiresParMotscles.length==0 && histoiresParPeriodes.length==0) {
    $(".histoire").show();
  } else {
    histoiresParMotscles.forEach(function(elt) {
      if(["","ou"].includes(et_ou) || histoiresParPeriodes.includes(elt)) {
        //alert("elt="+JSON.stringify(elt));
        $("."+elt).show();
      }
    });
    histoiresParPeriodes.forEach(function(elt) {
      if(["","ou"].includes(et_ou) || histoiresParMotscles.includes(elt)) {
        $("."+elt).show();
      }
    });
  }
  $('.image_histoires').visibility('refresh');
}
[#LayoutJSCode}
[#def}

{#def]initPeople[#<]
{#LayoutJSCode]
People={}
People.motscles=:{motsclesPeople_js};
People.motscles2people=:{motscles2people_js};
People.periodes=:{periodesPeople_js};
People.et_ou="";
People.motscles_selection="";

function intersectPeriodPeople(from,to) {
  var people=[];
  Object.keys(People.periodes).forEach(function(person) {
    var periode=People.periodes[person];
    //alert("periode:"+JSON.stringify(periode)+","+JSON.stringify(from)+","+JSON.stringify(to));
    if(periode[1]>=from && periode[0]<=to) {
      people.push(person);
    }
  });
  //alert("periodes="+JSON.stringify(people));
  return people;
};

function select_people(motscles_selection,et_ou) {
  var peopleParMotscles=motscles_selection.split(",").unique();
  //fix weird behavior of split "".split(",") == [""]
  if(peopleParMotscles.includes("") && peopleParMotscles.length==1) peopleParMotscles=[];
  People.motscles_selection=peopleParMotscles.join(",");
  motscles_selection=People.motscles_selection;
  var periode=$("#periode_people").val(),inter=[];
  var peopleParPeriodes=[];
  if(periode != "") {
    inter=periode.split(";");
    if(inter.length==1) inter.push(inter[0]);
    //alert("inter="+JSON.stringify(inter));
    peopleParPeriodes=intersectPeriodPeople(parseInt(inter[0]),parseInt(inter[1]));
  }
  //alert("periode=<"+periode+"> et/ou=<"+et_ou+"> motscles=<"+motscles+">");
  //alert("periodes="+JSON.stringify(peopleParPeriodes)+"] et/ou=<"+JSON.stringify(et_ou)+"> motscles="+JSON.stringify(peopleParMotscles));
  //hide and show
  $(".people").hide();
  if(peopleParMotscles.length==0 && peopleParPeriodes.length==0) {
    $(".people").show();
  } else {
    peopleParMotscles.forEach(function(elt) {
      if(["","ou"].includes(et_ou) || peopleParPeriodes.includes(elt)) {
        //alert("elt="+JSON.stringify(elt));
        $("."+elt).show();
      }
    });
    peopleParPeriodes.forEach(function(elt) {
      if(["","ou"].includes(et_ou) || peopleParMotscles.includes(elt)) {
        $("."+elt).show();
      }
    });
  }
  $('.image_people').visibility('refresh');
}
[#LayoutJSCode}
[#def}

{#def]initTextes[#<]
{#LayoutJSCode]
Textes={}
Textes.motscles=:{motsclesTextes_js};
Textes.motscles2textes=:{motscles2textes_js};
Textes.periodes=:{periodesTextes_js};
Textes.et_ou="";
Textes.motscles_selection="";

function intersectPeriodTextes(from,to) {
  var textes=[];
  //debug: var log="Search: "+","+JSON.stringify(from)+","+JSON.stringify(to)+" => ";
  Object.keys(Textes.periodes).forEach(function(texte) {
    var periode=Textes.periodes[texte];
    if(periode[1]>=from && periode[0]<=to) {
      //debug: log = log + ", [texte: "+texte+" -> periode:"+JSON.stringify(periode)+"]";
      textes.push(texte);
    }
  });
  //alert("periodes="+JSON.stringify(textes));
  //debug: alert(log);
  return textes;
};

function select_textes(motscles_selection,et_ou) {
  var textesParMotscles=motscles_selection.split(",").unique();
  //fix weird behavior of split "".split(",") == [""]
  if(textesParMotscles.includes("") && textesParMotscles.length==1) textesParMotscles=[];
  Textes.motscles_selection=textesParMotscles.join(",");
  motscles_selection=Textes.motscles_selection;
  var periode=$("#periode_textes").val(),inter=[];
  var textesParPeriodes=[];
  if(periode != "") {
    inter=periode.split(";");
    if(inter.length==1) inter.push(inter[0]);
    //alert("inter="+JSON.stringify(inter));
    textesParPeriodes=intersectPeriodTextes(parseInt(inter[0]),parseInt(inter[1]));
  }
  //alert("periode=<"+periode+"> et/ou=<"+et_ou+"> motscles=<"+motscles+">");
  //alert("periodes="+JSON.stringify(textesParPeriodes)+"] et/ou=<"+JSON.stringify(et_ou)+"> motscles="+JSON.stringify(textesParMotscles));
  //hide and show
  $(".textes").hide();
  if(textesParMotscles.length==0 && textesParPeriodes.length==0) {
    $(".textes").show();
  } else {
    textesParMotscles.forEach(function(elt) {
      if(["","ou"].includes(et_ou) || textesParPeriodes.includes(elt)) {
        //alert("elt="+JSON.stringify(elt));
        $("."+elt).show();
      }
    });
    textesParPeriodes.forEach(function(elt) {
      if(["","ou"].includes(et_ou) || textesParMotscles.includes(elt)) {
        $("."+elt).show();
      }
    });
  }
  $('.image_textes').visibility('refresh');
}
[#LayoutJSCode}
[#def}

{#def]initJS[#html>]
<script>
open_popups=[];
zIndexPop={};

$('.menu .item')
  .tab({
  "onVisible": function(path) {
      $('.image_'+path).visibility('refresh');
    }
  })
;
$('.menu .item').tab('change tab','dates');
$('.image_histoires')
  .visibility({
    type       : 'image',
    transition : 'fade in',
    duration   : 1000
  })
;
$('.image_people')
  .visibility({
    type       : 'image',
    transition : 'fade in',
    duration   : 1000
  })
;
$('.image_textes')
  .visibility({
    type       : 'image',
    transition : 'fade in',
    duration   : 1000
  })
;
$('.vue_histoire')
  .popup({
    inline     : true,
    on  : 'click',
    boundary: '.tab_histoires',
    position: 'bottom left',
    delay: {
      show: 300 //,
      //hide: 800
    },
    //hoverable: true,
    //prefer: 'opposite',
    lastResort: 'bottom left',
    onVisible: function() {
      //alert("ph #"+$(this).attr("id"));
      open_popups.push("#"+$(this).attr("id"));
    },
    onHide: function() {
      var psel="#"+$(this).attr("id");
      //alert("hide pt "+psel);
      var pos=open_popups.indexOf(psel);
      if(pos>=0) {
        open_popups.splice(pos,1);
      }
      //return(false);
    }
  })
;
$('.vue_person')
  .popup({
    inline     : true,
    on  : 'click',
    boundary: '.tab_people',
    context: '.tab_people',
    position: 'bottom left',
    delay: {
      show: 0 //,
      //hide: 800
    },
    //hoverable: true,
    //prefer: 'opposite',
    exclusive: true,
    lastResort: 'bottom left',
    onVisible: function() {
      //alert("pp #"+$(this).attr("id"));
      open_popups.push("#"+$(this).attr("id"));
    },
    onHide: function() {
      var psel="#"+$(this).attr("id");
      //alert("hide pt "+psel);
      var pos=open_popups.indexOf(psel);
      if(pos>=0) {
        open_popups.splice(pos,1);
      }
      //return(false);
    }
  })
;
$('.vue_texte')
  .popup({
    inline     : true,
    on  : 'click',
    boundary: '.tab_textes',
    position: 'bottom left',
    // delay: {
    //   show: 0 //,
    //   //hide: 800
    // },
    //hoverable: true,
    //prefer: 'opposite',
    exclusive: true,
    lastResort: 'bottom left',
    onVisible: function() {
      //alert("pt #"+$(this).attr("id"));
      open_popups.push("#"+$(this).attr("id"));
    },
    onHide: function() {
      var psel="#"+$(this).attr("id");
      //alert("hide pt "+psel);
      var pos=open_popups.indexOf(psel);
      if(pos>=0) {
        open_popups.splice(pos,1);
      }
      //return(false);
    }
  })
;


$('.ui.popup').click(function(evt) {
  if (evt.altKey) {
    //alert("pop :"+$(this).attr("id"));
    var zPop=parseInt(zIndexPop.css("zIndex")),zThis=parseInt($(this).css("zIndex"));
    zIndexPop.css("zIndex",zThis);
    if(zThis == zPop) {zPop = zPop + 1;}
    $(this).css("zIndex",zPop);
    //alert("swap "+zIndexPop.attr("id") + ":"+ zPop+ " " + $(this).attr("id")+ ":" + zThis);
    return(false);
  }
  //Save old clicked popup
  zIndexPop=$(this);
  //return(false);
});

function activeGoTab() {
  $(".go_tab").click(function(evt) {
    var sel,psel,tab=$(this).attr("tab"),to=$(this).attr("to");
    sel="#"+tab.substring(0,1)+"_"+to;
    psel="#p"+tab.substring(0,1)+"_"+to;
    //alert("sel:"+sel+" tab:"+tab+" et psel:"+ psel);
    if(!open_popups.includes(psel)) {
      if (evt.altKey) {
        $("#motscles_"+tab).dropdown("remove selected",$("#motscles_"+tab).dropdown("get values"));
        $("#et_ou_"+tab).dropdown("clear");
        $("#periode_"+tab).dropdown().val("");
        eval("select_"+tab+"('','');");
        //console.log("1");
        $(".tabitem").tab("change tab",tab);
        //console.log("2");
        $("html,body").animate({scrollTop: $(sel).offset().top},"slow");
        //console.log("3");
        $(sel).click();
        open_popups=[psel];
      } else {
        $(this).popup({
          popup: $(psel),
          inline: true,
          on: 'click',
          context: 'body',
          closable: true,
          lastResort: 'bottom left',
          onVisible: function() {
            //alert("popup:"+psel);
            open_popups.push(psel);
          },
          onHide: function() {
            //alert("hide pt "+psel);
            var pos=open_popups.indexOf(psel);
            if(pos>=0) {
              open_popups.splice(pos,1);
            }
            //return(false);
          }
        }).popup('toggle');
      }
    }
  });
}

activeGoTab();
</script>
[#def}

{#def]initDetectBrowser[#<]
{#LayoutJSHeader]
<script src="/tools/js/detect_browser.js"></script>
[#}
[#html>]
<div id="browser_info"></div>
[#<]
{#LayoutJSCodePost]
if(["Safari","Explorer"].includes(BrowserDetect.browser)) {
$("#browser_info").html("\
<div class='ui icon negative message'> \
  <i class='volume off icon'></i> \
  <div class='content'> \
  <div class='header'> \
    Attention pour utilisateurs Safari ou Internet Explorer\
  </div> \
  <p>Les navigateurs Safari et Internet Explorer ne sont pas compatibles avec les outils audio de ce site et il est préférable d'utiliser Firefox ou Chrome.</p></div></div>");
}
[#}
[#def}